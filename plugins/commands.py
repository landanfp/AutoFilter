# credit @codeflix_bots

import os
import logging
import random
import asyncio
import pytz
from database.refer import referdb
from Script import script
from datetime import datetime
from pyrogram import Client, filters, enums
from pyrogram.errors import ChatAdminRequired, FloodWait
from pyrogram.types import *
from database.ia_filterdb import Media, get_file_details, unpack_new_file_id, get_bad_files
from database.users_chats_db import db, delete_all_referal_users, get_referal_users_count, get_referal_all_users, referal_add_user
from info import *
from utils import get_settings, get_size, is_req_subscribed, save_group_settings, temp, verify_user, check_token, check_verification, get_token, get_shortlink, get_tutorial
from database.connections_mdb import active_connection
# from plugins.pm_filter import ENABLE_SHORTLINK
import re, asyncio, os, sys
import json
import base64
logger = logging.getLogger(__name__)

TIMEZONE = "Asia/Kolkata"
BATCH_FILES = {}
"""
@Client.on_message(filters.command("gsend") & filters.user(ADMINS))
async def send_chatmsg(bot, message):
    if message.reply_to_message:
        target_id = message.text
        command = ["/gsend"]
        for cmd in command:
            if cmd in target_id:
                target_id = target_id.replace(cmd, "")
        success = False
        try:
            chat = await bot.get_chat(int(target_id))
            await message.reply_to_message.copy(int(chat.id))
            success = True
        except Exception as e:
            await message.reply_text(f"<b>E Ä Ä·¥è Ä :- <code>{e}</code></b>")
        if success:
            await message.reply_text(f"<b>Y·¥è·¥ú Ä M·¥áss·¥Ä…¢·¥á H·¥Äs B·¥á·¥á…¥ S·¥ú·¥Ñ·¥áss“ì·¥ú ü ü è S·¥á…¥·¥Ö To {chat.id}.</b>")
        else:
            await message.reply_text("<b>A…¥ E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö !</b>")
    else:
        await message.reply_text("<b>C·¥è·¥ç·¥ç·¥Ä…¥·¥Ö I…¥·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á...</b>")
"""
@Client.on_message(filters.command("start") & filters.incoming)
async def start(client, message):
    if message.chat.type in [enums.ChatType.GROUP, enums.ChatType.SUPERGROUP]:
        buttons = [[
                    InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è ·¥ú Ä ·¥Ñ ú·¥Ä·¥õ ‚Ä¢', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ç·¥Äs·¥õ·¥á Ä ‚Ä¢', url="https://t.me/sewxiy"),
                    InlineKeyboardButton('‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/weebs_support')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ä·¥è…™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚Ä¢', url="https://t.me/codeflix_bots")
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply(script.GSTART_TXT.format(message.from_user.mention if message.from_user else message.chat.title, temp.U_NAME, temp.B_NAME), reply_markup=reply_markup, disable_web_page_preview=True)
        await asyncio.sleep(2) # üò¢ https://github.com/EvamariaTG/EvaMaria/blob/master/plugins/p_ttishow.py#L17 üò¨ wait a bit, before checking.
        if not await db.get_chat(message.chat.id):
            total=await client.get_chat_members_count(message.chat.id)
            await client.send_message(LOG_CHANNEL, script.LOG_TEXT_G.format(message.chat.title, message.chat.id, total, "Unknown"))       
            await db.add_chat(message.chat.id, message.chat.title)
        return 
    if not await db.is_user_exist(message.from_user.id):
        await db.add_user(message.from_user.id, message.from_user.first_name)
        await client.send_message(LOG_CHANNEL, script.LOG_TEXT_P.format(message.from_user.id, message.from_user.mention))
    if len(message.command) != 2:
        buttons = [[
                    InlineKeyboardButton('·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è ‚Ä¢', callback_data='shortlink_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢', callback_data='premium_info'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text(" ú·¥á ü ü·¥è  ô·¥Ä ô è,  ú·¥è·¥° ·¥Ä Ä·¥á  è·¥è·¥ú \n·¥°·¥Ä…™·¥õ ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ  ô·¥Ä ô è . . .")
        await m.edit_text("‚ö°")
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAECroBmQKMAAQ-Gw4nibWoj_pJou2vP1a4AAlQIAAIzDxlVkNBkTEb1Lc4eBA") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return
        
    if AUTH_CHANNEL and not await is_req_subscribed(client, message):
        try:
            invite_link = await client.create_chat_invite_link(int(AUTH_CHANNEL), creates_join_request=True)
        except ChatAdminRequired:
            logger.error("Make sure Bot is admin in Forcesub channel")
            return
        btn = [
                [
                    InlineKeyboardButton(
                        "‚Ä¢ ·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü ‚Ä¢", url=invite_link.invite_link
                    ),
                    InlineKeyboardButton(
                        text="‚Ä¢ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢",
                        url="https://t.me/codeflix_bots"
                    ),
                ]
                
            ]

        if message.command[1] != "subscribe":
            try:
                kk, file_id = message.command[1].split("_", 1)
                btn.append([InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", callback_data=f"checksub#{kk}#{file_id}")])
            except (IndexError, ValueError):
                btn.append([InlineKeyboardButton("‚Ä¢ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ‚Ä¢", url=f"https://t.me/{temp.U_NAME}?start={message.command[1]}")])
        await client.send_photo(
            chat_id=message.from_user.id,
            photo="https://graph.org/file/9649c1dcbae09f2e7700e.jpg",
            caption="·¥ä·¥è…™…¥ ·¥è·¥ú Ä ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥áÍú± ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥Ä…¥·¥Ö ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥áÍú±·¥õ·¥á·¥Ö Íú∞…™ ü·¥á.",
            reply_markup=InlineKeyboardMarkup(btn),
            parse_mode=enums.ParseMode.MARKDOWN
            )
        return
    if len(message.command) == 2 and message.command[1] in ["subscribe", "error", "okay", "help"]:
        buttons = [[
                    InlineKeyboardButton('·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò', url=f'http://t.me/{temp.U_NAME}?startgroup=true')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± ‚Ä¢', callback_data='main'),
                    InlineKeyboardButton('‚Ä¢ ·¥á·¥Ä Ä…¥ ·¥ç·¥è…¥·¥á è ‚Ä¢', callback_data='shortlink_info')
                ],[
                    InlineKeyboardButton('‚Ä¢ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢', callback_data='premium_info'),
                    InlineKeyboardButton('‚Ä¢ ·¥Ä ô·¥è·¥ú·¥õ ‚Ä¢', callback_data='about')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        m=await message.reply_text(" ú·¥á ü ü·¥è  ô·¥Ä ô è,  ú·¥è·¥° ·¥Ä Ä·¥á  è·¥è·¥ú \n·¥°·¥Ä…™·¥õ ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ  ô·¥Ä ô è . . .")
        await m.edit_text("‚ö°")
        await m.delete()        
        m=await message.reply_sticker("CAACAgUAAxkBAAECroBmQKMAAQ-Gw4nibWoj_pJou2vP1a4AAlQIAAIzDxlVkNBkTEb1Lc4eBA") 
        await asyncio.sleep(1)
        await m.delete()
        await message.reply_photo(
            photo=random.choice(PICS),
            caption=script.START_TXT.format(message.from_user.mention, gtxt, temp.U_NAME, temp.B_NAME),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return

    if message.command[1].startswith("reff_"):
        try:
            user_id = int(message.command[1].split("_")[1])
        except ValueError:
            await message.reply_text("Invalid refer!")
            return
        if user_id == message.from_user.id:
            await message.reply_text("H·¥á è D·¥ú·¥Ö·¥á, Y·¥è·¥ú C·¥Ä…¥'·¥õ R·¥á“ì·¥á Ä Y·¥è·¥ú Äs·¥á ü“ì ü§£!\n\ns ú·¥Ä Ä·¥á  ü…™…¥·¥ã  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ö ·¥Ä…¥·¥Ö …¢·¥á·¥õ 10  Ä·¥á“ì·¥á Ä Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õ …™“ì  è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ñ·¥è ü ü·¥á·¥Ñ·¥õ…™…¥…¢ 100  Ä·¥á“ì·¥á Ä Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õs ·¥õ ú·¥á…¥  è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á·¥õ 1 ·¥ç·¥è…¥·¥õ ú “ì Ä·¥á·¥á ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ç·¥á·¥ç ô·¥á Äs ú…™·¥ò.")
            return
        if referdb.is_user_in_list(message.from_user.id):
            await message.reply_text("Y·¥è·¥ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ä ü Ä·¥á·¥Ä·¥Ö è …™…¥·¥†…™·¥õ·¥á·¥Ö ‚ùó")
            return
        try:
            uss = await client.get_users(user_id)
        except Exception:
            return 	    
        referdb.add_user(message.from_user.id)
        fromuse = referdb.get_refer_points(user_id) + 10
        if fromuse == 100:
            referdb.add_refer_points(user_id, 0) 
            await message.reply_text(f"üéâ ùóñùóºùóªùó¥ùóøùóÆùòÅùòÇùóπùóÆùòÅùó∂ùóºùóªùòÄ! ùó¨ùóºùòÇ ùòÑùóºùóª ùü≠ùü¨ ùó•ùó≤ùó≥ùó≤ùóøùóøùóÆùóπ ùóΩùóºùó∂ùóªùòÅ ùóØùó≤ùó∞ùóÆùòÇùòÄùó≤ ùó¨ùóºùòÇ ùóµùóÆùòÉùó≤ ùóØùó≤ùó≤ùóª ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ ùóúùóªùòÉùó∂ùòÅùó≤ùó± ‚òû {uss.mention}!")		    
            await message.reply_text(user_id, f"You have been successfully invited by {message.from_user.mention}!") 	
            seconds = 2592000
            if seconds > 0:
                expiry_time = datetime.datetime.now() + datetime.timedelta(seconds=seconds)
                user_data = {"id": user_id, "expiry_time": expiry_time}  # Using "id" instead of "user_id"  
                await db.update_user(user_data)  # Use the update_user method to update or insert user data		    
                await client.send_message(
                chat_id=user_id,
                text=f"<b>H·¥á è {uss.mention}\n\nY·¥è·¥ú …¢·¥è·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥  ô è …™…¥·¥†…™·¥õ…™…¥…¢ 10 ·¥ús·¥á Äs ‚ùó", disable_web_page_preview=True              
                )
            for admin in ADMINS:
                await client.send_message(chat_id=admin, text=f"S·¥ú·¥Ñ·¥Ñ·¥áss “ì·¥ú ü ü è ·¥õ·¥Äs·¥ã ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á·¥Ö  ô è ·¥õ ú…™s ·¥ús·¥á Ä:\n\nuser N·¥Ä·¥ç·¥á: {uss.mention}\n\nUs·¥á Ä …™·¥Ö: {uss.id}!")	
        else:
            referdb.add_refer_points(user_id, fromuse)
            await message.reply_text(f"You have been successfully invited by {uss.mention}!")
            await client.send_message(user_id, f"ùóñùóºùóªùó¥ùóøùóÆùòÅùòÇùóπùóÆùòÅùó∂ùóºùóªùòÄ! ùó¨ùóºùòÇ ùòÑùóºùóª ùü≠ùü¨ ùó•ùó≤ùó≥ùó≤ùóøùóøùóÆùóπ ùóΩùóºùó∂ùóªùòÅ ùóØùó≤ùó∞ùóÆùòÇùòÄùó≤ ùó¨ùóºùòÇ ùóµùóÆùòÉùó≤ ùóØùó≤ùó≤ùóª ùó¶ùòÇùó∞ùó∞ùó≤ùòÄùòÄùó≥ùòÇùóπùóπùòÜ ùóúùóªùòÉùó∂ùòÅùó≤ùó± ‚òû{message.from_user.mention}!")
        return
        
    if len(message.command) == 2 and message.command[1] in ["premium"]:
        buttons = [[
                    InlineKeyboardButton('üì≤ Íú±·¥á…¥·¥Ö ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ Íú±·¥Ñ Ä·¥á·¥á…¥Íú± ú·¥è·¥õ', user_id=int(6497757690))
                  ],[
                    InlineKeyboardButton('‚ùå ·¥Ñ ü·¥èÍú±·¥á ‚ùå', callback_data='close_data')
                  ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await message.reply_photo(
            photo=(SUBSCRIPTION),
            caption=script.PREPLANS_TXT.format(message.from_user.mention),
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
        )
        return  
    data = message.command[1]
    try:
        pre, file_id = data.split('_', 1)
    except:
        file_id = data
        pre = ""
    if data.split("-", 1)[0] == "BATCH":
        sts = await message.reply("<b>Please wait...</b>")
        file_id = data.split("-", 1)[1]
        msgs = BATCH_FILES.get(file_id)
        if not msgs:
            file = await client.download_media(file_id)
            try: 
                with open(file) as file_data:
                    msgs=json.loads(file_data.read())
            except:
                await sts.edit("FAILED")
                return await client.send_message(LOG_CHANNEL, "UNABLE TO OPEN FILE.")
            os.remove(file)
            BATCH_FILES[file_id] = msgs
        for msg in msgs:
            title = msg.get("title")
            size=get_size(int(msg.get("size", 0)))
            f_caption=msg.get("caption", "")
            if BATCH_FILE_CAPTION:
                try:
                    f_caption=BATCH_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{title}"
            try:
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton('‚Ä¢ s·¥õ Ä·¥á·¥Ä·¥ç', callback_data=f'generate_stream_link:{file_id}'),
                          InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢', url=GRP_LNK)
                         ]
                        ]
                    )
                )
            except FloodWait as e:
                await asyncio.sleep(e.x)
                logger.warning(f"Floodwait of {e.x} sec.")
                await client.send_cached_media(
                    chat_id=message.from_user.id,
                    file_id=msg.get("file_id"),
                    caption=f_caption,
                    protect_content=msg.get('protect', False),
                    reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton('‚Ä¢ s·¥õ Ä·¥á·¥Ä·¥ç', callback_data=f'generate_stream_link:{file_id}'),
                          InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢', url=GRP_LNK)
                         ]
                        ]
                    )
                )
            except Exception as e:
                logger.warning(e, exc_info=True)
                continue
            await asyncio.sleep(1) 
        await sts.delete()
        return
    
    elif data.split("-", 1)[0] == "DSTORE":
        sts = await message.reply("<b>Please wait...</b>")
        b_string = data.split("-", 1)[1]
        decoded = (base64.urlsafe_b64decode(b_string + "=" * (-len(b_string) % 4))).decode("ascii")
        try:
            f_msg_id, l_msg_id, f_chat_id, protect = decoded.split("_", 3)
        except:
            f_msg_id, l_msg_id, f_chat_id = decoded.split("_", 2)
            protect = "/pbatch" if PROTECT_CONTENT else "batch"
        diff = int(l_msg_id) - int(f_msg_id)
        async for msg in client.iter_messages(int(f_chat_id), int(l_msg_id), int(f_msg_id)):
            if msg.media:
                media = getattr(msg, msg.media.value)
                if BATCH_FILE_CAPTION:
                    try:
                        f_caption=BATCH_FILE_CAPTION.format(file_name=getattr(media, 'file_name', ''), file_size=getattr(media, 'file_size', ''), file_caption=getattr(msg, 'caption', ''))
                    except Exception as e:
                        logger.exception(e)
                        f_caption = getattr(msg, 'caption', '')
                else:
                    media = getattr(msg, msg.media.value)
                    file_name = getattr(media, 'file_name', '')
                    f_caption = getattr(msg, 'caption', file_name)
                try:
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, caption=f_caption, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            elif msg.empty:
                continue
            else:
                try:
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except FloodWait as e:
                    await asyncio.sleep(e.x)
                    await msg.copy(message.chat.id, protect_content=True if protect == "/pbatch" else False)
                except Exception as e:
                    logger.exception(e)
                    continue
            await asyncio.sleep(1) 
        return await sts.delete()

    elif data.split("-", 1)[0] == "verify":
        userid = data.split("-", 2)[1]
        token = data.split("-", 3)[2]
        if str(message.from_user.id) != str(userid):
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=True
            )
        is_valid = await check_token(client, userid, token)
        if is_valid == True:
            await message.reply_text(
                text=f"<b>Hey {message.from_user.mention}, You are successfully verified !\nNow you have unlimited access for all movies till today midnight.</b>",
                protect_content=True
            )
            await verify_user(client, userid, token)
        else:
            return await message.reply_text(
                text="<b>Invalid link or Expired link !</b>",
                protect_content=True
            )
    if data.startswith("sendfiles"):
        protect_content=True
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"
        chat_id = int("-" + file_id.split("-")[1])
        userid = message.from_user.id if message.from_user else None
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=allfiles_{file_id}")
        k = await client.send_message(chat_id=message.from_user.id,text=f"<b>ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚ÄºÔ∏è …¢·¥á·¥õ ·¥Ä ü ü Íú∞…™ ü·¥áÍú± …™…¥ ·¥Ä Íú±…™…¥…¢ ü·¥á  ü…™…¥·¥ã ‚ÄºÔ∏è\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n</b>", reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                    ], [
                        InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                    ], [
                        InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="seeplans")                        
                    ]
                ]
            )
        )
        await asyncio.sleep(300)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    """
    elif data.startswith("short"):
        protect_content=True
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        chat_id = temp.SHORT.get(user_id)
        files_ = await get_file_details(file_id)
        files = files_[0]
        g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
        k = await client.send_message(
            chat_id=user_id,
            text=f"<b>ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n</b>",
            reply_markup=InlineKeyboardMarkup(
                [[
                    InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                ], [
                    InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                ], [
                    InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="seeplans")
                ]]
            )
        )
        await asyncio.sleep(600)
        await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    elif data.startswith("all"):
        protect_content=True
        user_id = message.from_user.id
        files = temp.GETALL.get(file_id)
        if not files:
            return await message.reply('<b><i>…¥·¥è Íú±·¥ú·¥Ñ ú Íú∞…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !</b></i>')
        filesarr = []
        for file in files:
            file_id = file.file_id
            files_ = await get_file_details(file_id)
            files1 = files_[0]
            title = ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))
            size=get_size(files1.file_size)
            f_caption=files1.caption
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
                except Exception as e:
                    logger.exception(e)
                    f_caption=f_caption
            if f_caption is None:
                f_caption = f"{' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files1.file_name.split()))}"

            if not await check_verification(client, message.from_user.id) and VERIFY == True:
                btn = [[
                    InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
                ],[
                    InlineKeyboardButton("‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ÅâÔ∏è", url=HOWTOVERIFY)
                ]]
                await message.reply_text(
                    text="<b>üëã  ú·¥á è {message.from_user.mention},  è·¥è·¥ú' Ä·¥á ·¥Ä Ä·¥á Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ‚úÖ\n\n…¥·¥è·¥°  è·¥è·¥ú'·¥†·¥á ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ…™ ü ü …¥·¥áx·¥õ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥ üéâ</b>",
                    protect_content=True,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                caption=f_caption,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton('‚Ä¢ s·¥õ Ä·¥á·¥Ä·¥ç', callback_data=f'generate_stream_link:{file_id}'),
                          InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢', url=GRP_LNK)
                         ]
                        ]
                    )
                )
            filesarr.append(msg)
        k = await client.send_message(chat_id = message.from_user.id, text=f"<b>‚ùóÔ∏è <u>…™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ</u> ‚ùóÔ∏è</b>\n\n<b>·¥õ ú·¥áÍú±·¥á ·¥†…™·¥Ö·¥á·¥èÍú± / Íú∞…™ ü·¥áÍú± ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥</b> <b><u>10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> </b><b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±).</b>\n\n<b><i>üìå ·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú·¥áÍú±·¥á ·¥†…™·¥Ö·¥á·¥èÍú± / Íú∞…™ ü·¥áÍú± ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á.</i></b>")
        await asyncio.sleep(600)
        for x in filesarr:
            await x.delete()
        await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥èÍú± / Íú∞…™ ü·¥áÍú± ·¥Ä Ä·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
        return
        
    elif data.startswith("files"):
        current_time = datetime.now(pytz.timezone(TIMEZONE))
        curr_time = current_time.hour        
        if curr_time < 12:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥ç·¥è Ä…¥…™…¥…¢ üëã" 
        elif curr_time < 17:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥Ä“ì·¥õ·¥á Ä…¥·¥è·¥è…¥ üëã" 
        elif curr_time < 21:
            gtxt = "…¢·¥è·¥è·¥Ö ·¥á·¥†·¥á…¥…™…¥…¢ üëã"
        else:
            gtxt = "…¢·¥è·¥è·¥Ö …¥…™…¢ ú·¥õ üëã"        
        user_id = message.from_user.id
        if temp.SHORT.get(user_id)==None:
            return await message.reply_text(text="<b>Please Search Again in Group</b>")
        else:
            chat_id = temp.SHORT.get(user_id)
        settings = await get_settings(chat_id)
        if not await db.has_premium_access(user_id) and settings['is_shortlink']: #Don't change anything without my permission @CoderluffyTG
            files_ = await get_file_details(file_id)
            files = files_[0]
            g = await get_shortlink(chat_id, f"https://telegram.me/{temp.U_NAME}?start=file_{file_id}")
            k = await client.send_message(chat_id=message.from_user.id,text=f"ü´Ç  ú·¥á è {message.from_user.mention}, {gtxt}\n\n‚úÖ  è·¥è·¥ú Ä  ü…™…¥·¥ã …™Íú±  Ä·¥á·¥Ä·¥Ö è, ·¥ã…™…¥·¥Ö ü è ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ô·¥ú·¥õ·¥õ·¥è…¥.\n\n‚ö†Ô∏è Íú∞…™ ü·¥á …¥·¥Ä·¥ç·¥á : <code>{files.file_name}</code> \n\nüì• Íú∞…™ ü·¥á Íú±…™·¥¢·¥á : <code>{get_size(files.file_size)}</code>\n\n", reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton('üìÅ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö üìÅ', url=g)
                        ], [
                            InlineKeyboardButton('‚ö°  ú·¥è·¥° ·¥õ·¥è ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ‚ö°', url=await get_tutorial(chat_id))
                        ], [
                            InlineKeyboardButton('‚ú®  ô·¥ú è Íú±·¥ú ôÍú±·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥ :  Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ä·¥ÖÍú± ‚ú®', callback_data="seeplans")                            
                        ]
                    ]
                )
            )
            await asyncio.sleep(600)
            await k.edit("<b> è·¥è·¥ú Ä ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á …™Íú± ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !\n·¥ã…™…¥·¥Ö ü è Íú±·¥á·¥Ä Ä·¥Ñ ú ·¥Ä…¢·¥Ä…™…¥.</b>")
            return
    user = message.from_user.id
    files_ = await get_file_details(file_id)           
    if not files_:
        pre, file_id = ((base64.urlsafe_b64decode(data + "=" * (-len(data) % 4))).decode("ascii")).split("_", 1)
        try:
            if not await check_verification(client, message.from_user.id) and VERIFY == True:
                btn = [[
                    InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
                ],[
                    InlineKeyboardButton("‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ÅâÔ∏è", url=HOWTOVERIFY)
                ]]
                await message.reply_text(
                    text="<b>üëã  ú·¥á è ·¥õ ú·¥á Ä·¥á,\n\nüìå <u> è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥†·¥á Ä…™Íú∞ è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ…™ ü ü …¥·¥áx·¥õ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥</u>.</b>",
                    protect_content=True,
                    reply_markup=InlineKeyboardMarkup(btn)
                )
                return
            msg = await client.send_cached_media(
                chat_id=message.from_user.id,
                file_id=file_id,
                protect_content=True if pre == 'filep' else False,
                reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton('‚Ä¢ s·¥õ Ä·¥á·¥Ä·¥ç', callback_data=f'generate_stream_link:{file_id}'),
                          InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢', url=GRP_LNK)
                         ]
                        ]
                    )
                )
            filetype = msg.media
            file = getattr(msg, filetype.value)
            title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), file.file_name.split()))
            size=get_size(file.file_size)
            f_caption = f"<code>{title}</code>"
            if CUSTOM_FILE_CAPTION:
                try:
                    f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='')
                except:
                    return
            await msg.edit_caption(f_caption)
            btn = [[
                InlineKeyboardButton("‚ùó …¢·¥á·¥õ Íú∞…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
            ]]
            k = await client.send_message(chat_id = message.from_user.id, text=f"<b>‚ùóÔ∏è <u>…™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ</u> ‚ùóÔ∏è</b>\n\n<b>·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥</b> <b><u>10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> </b><b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±).</b>\n\n<b><i>üìå ·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á.</i></b>")
            await asyncio.sleep(600)
            await msg.delete()
            await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á üëá</b>",reply_markup=InlineKeyboardMarkup(btn))
            return
        except:
            pass
        return await message.reply('…¥·¥è Íú±·¥ú·¥Ñ ú Íú∞…™ ü·¥á ·¥áx…™Íú±·¥õÍú± !')
    files = files_[0]
    title = '' + ' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))
    size=get_size(files.file_size)
    f_caption=files.caption
    if CUSTOM_FILE_CAPTION:
        try:
            f_caption=CUSTOM_FILE_CAPTION.format(file_name= '' if title is None else title, file_size='' if size is None else size, file_caption='' if f_caption is None else f_caption)
        except Exception as e:
            logger.exception(e)
            f_caption=f_caption
    if f_caption is None:
        f_caption = f" {' '.join(filter(lambda x: not x.startswith('[') and not x.startswith('@'), files.file_name.split()))}"

    if not await check_verification(client, message.from_user.id) and VERIFY == True:
        btn = [[
            InlineKeyboardButton("‚ôªÔ∏è ·¥Ñ ü…™·¥Ñ·¥ã  ú·¥á Ä·¥á ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ôªÔ∏è", url=await get_token(client, message.from_user.id, f"https://telegram.me/{temp.U_NAME}?start="))
        ],[
            InlineKeyboardButton("‚ÅâÔ∏è  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è ‚ÅâÔ∏è", url=HOWTOVERIFY)
        ]]
        await message.reply_text(
            text="<b>üëã  ú·¥á è ·¥õ ú·¥á Ä·¥á,\n\nüìå <u> è·¥è·¥ú' Ä·¥á …¥·¥è·¥õ ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö ·¥õ·¥è·¥Ö·¥Ä è, ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥†·¥á Ä…™Íú∞ è ·¥Ä…¥·¥Ö …¢·¥á·¥õ ·¥ú…¥ ü…™·¥ç…™·¥õ·¥á·¥Ö ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ…™ ü ü …¥·¥áx·¥õ ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥</u>.</b>",
            protect_content=True,
            reply_markup=InlineKeyboardMarkup(btn)
        )
        return
    msg = await client.send_cached_media(
        chat_id=message.from_user.id,
        file_id=file_id,
        caption=f_caption,
        protect_content=True if pre == 'filep' else False,
        reply_markup=InlineKeyboardMarkup(
                        [
                         [
                          InlineKeyboardButton('‚Ä¢ s·¥õ Ä·¥á·¥Ä·¥ç', callback_data=f'generate_stream_link:{file_id}'),
                          InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ‚Ä¢', url=GRP_LNK)
                         ]
                        ]
                    )
                )
    btn = [[
        InlineKeyboardButton("‚ùó …¢·¥á·¥õ Íú∞…™ ü·¥á ·¥Ä…¢·¥Ä…™…¥ ‚ùó", callback_data=f'delfile#{file_id}')
    ]]
    k = await client.send_message(chat_id = message.from_user.id, text=f"<b>‚ùóÔ∏è <u>…™·¥ç·¥ò·¥è Ä·¥õ·¥Ä…¥·¥õ</u> ‚ùóÔ∏è</b>\n\n<b>·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥°…™ ü ü  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö …™…¥</b> <b><u>10 ·¥ç…™…¥·¥ú·¥õ·¥áÍú±</u> </b><b>(·¥Ö·¥ú·¥á ·¥õ·¥è ·¥Ñ·¥è·¥ò è Ä…™…¢ ú·¥õ …™Íú±Íú±·¥ú·¥áÍú±).</b>\n\n<b><i>üìå ·¥ò ü·¥á·¥ÄÍú±·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö ·¥õ ú…™Íú± ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á ·¥õ·¥è Íú±·¥è·¥ç·¥á·¥° ú·¥á Ä·¥á ·¥á üÍú±·¥á ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö…™…¥…¢ ·¥õ ú·¥á Ä·¥á.</i></b>")
    await asyncio.sleep(600)
    await msg.delete()
    await k.edit_text("<b> è·¥è·¥ú Ä ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á …™Íú± Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö !!\n\n·¥Ñ ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ·¥è …¢·¥á·¥õ  è·¥è·¥ú Ä ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö ·¥†…™·¥Ö·¥á·¥è / Íú∞…™ ü·¥á üëá</b>",reply_markup=InlineKeyboardMarkup(btn))
    return  

    """
#-------------------------------------------------------------------------------
@Client.on_message(filters.command('channel') & filters.user(ADMINS))
async def channel_info(bot, message):
           
    """Send basic information of channel"""
    if isinstance(CHANNELS, (int, str)):
        channels = [CHANNELS]
    elif isinstance(CHANNELS, list):
        channels = CHANNELS
    else:
        raise ValueError("·¥ú…¥·¥áx·¥ò·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥õ è·¥ò·¥á ·¥èÍú∞ ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±.")

    text = 'üìë **…™…¥·¥Ö·¥áx·¥á·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± / …¢ Ä·¥è·¥ú·¥òÍú±  ü…™Íú±·¥õ :**\n'
    for channel in channels:
        chat = await bot.get_chat(channel)
        if chat.username:
            text += '\n@' + chat.username
        else:
            text += '\n' + chat.title or chat.first_name

    text += f'\n\n**·¥õ·¥è·¥õ·¥Ä ü :** {len(CHANNELS)}'

    if len(text) < 4096:
        await message.reply(text)
    else:
        file = 'Indexed channels.txt'
        with open(file, 'w') as f:
            f.write(text)
        await message.reply_document(file)
        os.remove(file)


@Client.on_message(filters.command('logs') & filters.user(ADMINS))
async def log_file(bot, message):
    """Send log file"""
    try:
        await message.reply_document('LUCY BOT.LOG')
    except Exception as e:
        await message.reply(str(e))
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------    
@Client.on_message(filters.command("donate"))
async def donate_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("‚Ä¢ ·¥Ö·¥è…¥·¥Ä·¥õ·¥á ‚Ä¢ ", url="https://t.me/OtakuFlix_Network/4640"),
            InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢", url="https://t.me/team_netflix")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(text=script.DONATION_TXT, reply_markup=reply_markup)

@Client.on_message(filters.command("help"))
async def help_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("‚Ä¢ ·¥è·¥ò·¥á…¥ …™…¥ ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ‚Ä¢", url="https://t.me/Lucy_Filter_bot?start=help"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(text=script.HELP_TXT, reply_markup=reply_markup)

@Client.on_message(filters.command("support"))
async def support_command(client, message):
    buttons = [
        [
            InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url="https://t.me/weebs_support"),
            InlineKeyboardButton("·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás", url="https://t.me/codeflix_bots")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(buttons)
    await message.reply_text(text=script.SUPPORT_TXT, reply_markup=reply_markup)
#------------------------------------------------------------------------------- 
#-------------------------------------------------------------------------------
@Client.on_message(filters.command("refer"))
async def refer(bot, message):
    btn = [[
        InlineKeyboardButton('‚Ä¢ s ú·¥Ä Ä·¥á  ü…™…¥·¥ã', url=f'https://telegram.me/share/url?url=https://t.me/{bot.me.username}?start=reff_{message.from_user.id}&text=H·¥á ü ü·¥è%21%20Ex·¥ò·¥á Ä…™·¥á…¥·¥Ñ·¥á%20·¥Ä%20B·¥è·¥õ%20T ú·¥Ä·¥õ%20O“ì“ì·¥á Äs%20a%20·¥†·¥Äs·¥õ%20L…™ ô Ä·¥Ä Ä è%20·¥è“ì%20U…¥ ü…™·¥ç·¥õ·¥á·¥Ö%20M·¥è·¥†…™·¥ás%20and%20S·¥á Ä…™·¥ás.%20%F0%9F%98%83'),
        InlineKeyboardButton(f'‚è≥ {referdb.get_refer_points(message.from_user.id)}', callback_data='ref_point'),
        InlineKeyboardButton('·¥Ñ ü·¥ès·¥á ‚Ä¢', callback_data='close_data')
    ]]  
    reply_markup = InlineKeyboardMarkup(btn)
    await message.reply_photo(
            photo=random.choice(REFER_PICS),
            caption=f'<b>¬ª  ú·¥á è  ô Ä·¥è/s…™s {message.from_user.mention},\n\nH·¥á Ä·¥á …™Íú±  è·¥è·¥ú Ä  Ä·¥á“ì“ì·¥á Ä·¥Ä ü  ü…™…¥·¥ã:\nhttps://t.me/{bot.me.username}?start=reff_{message.from_user.id}\n\nS ú·¥Ä Ä·¥á ·¥õ ú…™s  ü…™…¥·¥ã ·¥°…™·¥õ ú  è·¥è·¥ú Ä “ì Ä…™·¥á…¥·¥Ö, E·¥Ä·¥Ñ ú ·¥õ…™·¥ç·¥á ·¥õ ú·¥á è ·¥ä·¥è…™…¥  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ 10  Ä·¥á“ì·¥á Ä·¥Ä ü ·¥ò·¥è…™…¥·¥õ ·¥Ä…¥·¥Ö ·¥Ä“ì·¥õ·¥á Ä 100 ·¥ò·¥è…™…¥·¥õs  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ 1 ·¥ç·¥è…¥·¥õ ú ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç s·¥ú ôs·¥Ñ Ä…™·¥ò·¥õ…™·¥è…¥.</b>',
            reply_markup=reply_markup,
            parse_mode=enums.ParseMode.HTML
    )

@Client.on_message(filters.command("restart") & filters.user(ADMINS))
async def stop_button(bot, message):
    msg = await bot.send_message(text="<b><i> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢</i></b>", chat_id=message.chat.id)       
    await asyncio.sleep(3)
    await msg.edit("<b><i><u> ô·¥è·¥õ …™Íú±  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö</u> ‚úÖ</i></b>")
    os.execl(sys.executable, sys.executable, *sys.argv)

